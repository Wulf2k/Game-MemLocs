

$path = "C:\Program Files (x86)\Steam\steamapps\common\DARK SOULS REMASTERED\DarkSoulsRemastered.exe"
$size = (Get-Item $path).length

$bigendian = $false
$global:addroffset = 0
$global:txtptr = 0x14319e000

$ba = [System.IO.File]::ReadAllBytes($path)
##########################################
Function RBytes
{
	Param (
		$addr,
		$size
	)
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	[byte[]] $rb = [byte[]]::new(4)
	[System.Buffer]::BlockCopy($ba, $addr, $rb, 0, $rb.Length)
	$rb
}
##########################################
Function RUInt32
{   
	Param (
        $addr
    )
	
	$rb = RBytes $addr 4
	
	if ($bigendian)
	{
		[Array]::Reverse($rb)
	}
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	[bitconverter]::ToUInt32($rb,0)
}
##########################################
Function WBytes
{
	Param (
		$addr,
		$wb
	)
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	[System.Buffer]::BlockCopy($wb, 0, $ba, $addr, $wb.Length)
}
##########################################
Function WStrA
{
	Param (
		$addr,
		$str
	)
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	$wb = [System.Text.Encoding]::UTF8.GetBytes($str)
	[System.Buffer]::BlockCopy($wb, 0, $ba, $addr, $wb.Length)
}
##########################################
Function WStrU
{
	Param (
		$addr,
		$str
	)
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	$wb = [System.Text.Encoding]::Unicode.GetBytes($str)
	if ($bigendian) {
		for ($i = 0; $i -lt $str.Length; $i++)
		{
			$a = $wb[$i * 2]
			$b = $wb[$i * 2 + 1]
			$wb[$i * 2 + 1] = $a
			$wb[$i * 2] = $b
		}
	}
	
	[System.Buffer]::BlockCopy($wb, 0, $ba, $addr, $wb.Length)
}
##########################################
Function WUInt32
{
	Param (
		$addr,
		$val
	)
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	$wb = [bitconverter]::GetBytes($val)
	if ($bigendian)
	{
		[Array]::Reverse($wb)
	}
	[System.Buffer]::BlockCopy($wb, 0, $ba, $addr, $wb.Length)
}
##########################################
Function XorBytes
{
	Param (
		[byte[]] $b1,
		[byte[]] $b2
	)
	FindExeOffset $addr
	$addr = $addr + $global:addroffset
	[byte[]] $b3 = [byte[]]::new($b1.count)
	for($i=0; $i -lt $b1.count ; $i++)
	{
		$b3[$i] = $b1[$i] -bxor $b2[$i]
	}
	$b3
}
##########################################
Function AreArraysEqual($a1, $a2) {
    if ($a1 -isnot [array] -or $a2 -isnot [array]) {
      throw "Both inputs must be an array"
    }
    if ($a1.Rank -ne $a2.Rank) {
      return $false 
    }
    if ([System.Object]::ReferenceEquals($a1, $a2)) {
      return $true
    }
    for ($r = 0; $r -lt $a1.Rank; $r++) {
      if ($a1.GetLength($r) -ne $a2.GetLength($r)) {
            return $false
      }
    }

    $enum1 = $a1.GetEnumerator()
    $enum2 = $a2.GetEnumerator()   

    while ($enum1.MoveNext() -and $enum2.MoveNext()) {
      if ($enum1.Current -ne $enum2.Current) {
            return $false
      }
    }
    return $true
} 
##########################################
Function CreatepStrU
{
	Param (
		$addr,
		$txt
	)
	$txt = $txt + [char]$null
	$addr = $addr
	WStrU $global:txtptr $txt
	WUInt32 $addr $global:txtptr 
	$global:txtptr  = $global:txtptr + ($txt.length * 2)
}
#-------------------------------------------

function Hex-String-to-Bytes {
    param (
        [string]$hex
    )

    $hex = $hex -replace " ", "" -replace "-", "" -replace ":"
    $byteArray = New-Object byte[] ($hex.Length -shr 1)
    for ($i = 0; $i -lt $byteArray.Length; ++$i) {
        $byteArray[$i] = [byte]([convert]::ToInt32($hex.Substring($i * 2, 2), 16))
    }
    return $byteArray
}

function Hex-String-to-Wildcard {
    param (
        [string]$hex
    )

    $hex = $hex -replace " ", "" -replace "-", "" -replace ":"
    $wildcardArray = New-Object byte[] ($hex.Length -shr 1)
    for ($i = 0; $i -lt $wildcardArray.Length; ++$i) {
        if ($hex[$i * 2] -eq '?') {
            $wildcardArray[$i] = 1
        }
    }
    return $wildcardArray
}

function ReplaceBytes {
    param (
        [string]$find,
        [string]$rep
    )

    $count = 0
    $rb = Hex-String-to-Bytes -hex $rep
    $rwb = Hex-String-to-Wildcard -hex $rep

    $fb = Hex-String-to-Bytes -hex $find
    $fwb = Hex-String-to-Wildcard -hex $find

    $index = 0
    while ($index -ne -1) {
        $index = FindBytes -find $fb -wild $fwb -index $index
        if ($index -ne -1) {
            for ($i = 0; $i -lt $rb.Length; $i++) {
                if ($rwb[$i] -ne 1) {
                    $ba[$index + $i] = $rb[$i]
                }
            }
            $count++
            $index++
        }
    }
    return $count
}

function FindBytes {
    param (
        [byte[]]$find,
        [byte[]]$wild,
        [int]$index = 0
    )

    if ($null -eq $ba -or $null -eq $find -or 0 -eq $ba.Length -or 0 -eq $find.Length -or $find.Length -gt $ba.Length) {
        return -2
    }

    for ($i = $index; $i -lt ($ba.Length - $find.Length + 1); $i++) {
        if ($ba[$i] -eq $find[0]) {
            $match = $true
            for ($m = 1; $m -lt $find.Length; $m++) {
                if (($ba[$i + $m] -ne $find[$m]) -and ($wild[$m] -ne 1)) {
                    $match = $false
                    break
                }
                if ($m -eq ($find.Length - 1) -and $match) {
                    return $i
                }
            }
        }
    }
    return -1
}


function FindExeOffset {
	param (
		$addr
	)
	
	if ($addr -ge 0x140000000 -and $addr -le 0x140000fff)  {$global:addroffset = 0 - 0x140000000}
	if ($addr -ge 0x140001000 -and $addr -le 0x14129c3ff)  {$global:addroffset = 0 - 0x140000c00}
	if ($addr -ge 0x14129d000 -and $addr -le 0x141a24bff)  {$global:addroffset = 0 - 0x140001800}
	if ($addr -ge 0x141a25000 -and $addr -le 0x141b669ff)  {$global:addroffset = 0 - 0x140001c00}
	#if ($addr -ge 0x141b66a00 -and $addr -le 0x141d0af77)  {$global:addroffset = 0 - }
	if ($addr -ge 0x141d0b000 -and $addr -le 0x141e5d9ff)  {$global:addroffset = 0 - 0x1401a6200}
	#if ($addr -ge 0x141e5e000 -and $addr -le 0x141e5e7ff)  {$global:addroffset = 0 - }
	if ($addr -ge 0x141e5f000 -and $addr -le 0x141e5f1ff)  {$global:addroffset = 0 - 0x1401a7000}
	if ($addr -ge 0x141e60000 -and $addr -le 0x14200f9ff)  {$global:addroffset = 0 - 0x1401a7e00}
	if ($addr -ge 0x142010000 -and $addr -le 0x142018bff)  {$global:addroffset = 0 - 0x1401a8400}
	if ($addr -ge 0x142019000)  {$global:addroffset = 0 - 0x1401a8800}
}
#-------------------------------------------


# mask match?   48 0f 46 ?? 48 89 ?? ?4 10
[long[]] $hash4 = 0x1402b9d7f, 0x1402cb3af, 0x14034331f, 0x1403649bf, 0x1403b5dc4, 0x1403bd5bf, 0x14041838f, 0x140426b5f, 0x14042e9df, 0x14048cc6f, 0x140569a0f, 0x1405d137f, 0x1405ea0ef, 0x1406d808f, 0x1407badef, 0x1407f81cf, 0x14095611f, 0x140a3dd3f, 0x140abbbdf, 0x140ae74af, 0x140ccaeef, 0x140d481dd, 0x1411f5481, 0x142029ba2, 0x14202a627, 0x14202a916, 0x14202b01b, 0x14202ca01, 0x14202cc41, 0x14202fd56, 0x1420303e7, 0x142031d9c, 0x142032952, 0x142035ae9, 0x142038b11, 0x142038ff2, 0x142039656, 0x142039cc4, 0x14203c54b, 0x14203d5d9, 0x14203f43e, 0x14203fbf1, 0x1420407bb, 0x142040a21, 0x142041a19, 0x142042e35, 0x142049072, 0x1420498b6, 0x14204a11b, 0x14204d552, 0x1420673fb, 0x142067969, 0x142068938, 0x14206a0ec, 0x14206cdff, 0x142071458, 0x1420723f9, 0x142072614, 0x14207461f, 0x14207666c, 0x142084754, 0x14208794d, 0x14208962b, 0x14208ab36, 0x1420a3c6d, 0x1420a431d, 0x1420a47df, 0x1420a7a0f, 0x1420ace95, 0x1420bb29b, 0x1420bbea5, 0x1420bd41f, 0x1420bdaa0, 0x1420bf8a0, 0x1420c4185, 0x1420c6807, 0x1420c7585, 0x1420c7785, 0x1420c87f1, 0x1420c9ebb, 0x1420cc6b4, 0x1420cd8d2, 0x1420d1012, 0x1420d1306, 0x1420d173d, 0x1420d4cf3, 0x1420d6dc6, 0x1420d72ab, 0x1420d7ba4, 0x1420d8767, 0x1420d888c, 0x1420dbb1f, 0x1420dff74, 0x1420e46f5, 0x1420e4996, 0x1420e500b, 0x1420e5303, 0x1420e722c, 0x1420e7d81, 0x1420e8e76, 0x1420ea1c8, 0x1420f0e2d, 0x1420f3245, 0x1420f3828, 0x1420f6ef6, 0x1420f9149, 0x1420f9a70, 0x1420fa947, 0x1420fee89, 0x142102e0f, 0x142104009, 0x142107523, 0x14210a285, 0x14210db4b, 0x14210df71, 0x14210f0b6, 0x142110130, 0x1421102ac, 0x142110ac9, 0x14211813f, 0x1421189a7, 0x14211b08a, 0x14211d7fc, 0x142120e35, 0x142121fb2, 0x142122487, 0x14212b948, 0x142131fd7, 0x1421335c1, 0x142134d6f, 0x142135063, 0x142136bc3, 0x1421377f3, 0x142139752, 0x14213ba87, 0x14213c4f4, 0x14213d2ac, 0x14213e7c1, 0x142141db9, 0x142143cff, 0x142144fcb, 0x1421476ed, 0x142148450, 0x14214eb05, 0x1421688fc, 0x14216a71a, 0x14216a86f, 0x14216e254, 0x14217d49d, 0x14217f4dc, 0x142183d70, 0x14218447a, 0x14218493a, 0x1421857bd, 0x1421891c0, 0x14218cf35, 0x14218d8d5, 0x14218e426, 0x142190612, 0x142190898, 0x142190f15, 0x142195a31, 0x1421968d4, 0x1421982a2, 0x14219835d, 0x1421990eb, 0x142199634, 0x14219c3f9, 0x14219c66c, 0x14219db97, 0x1421a1829, 0x1421a8f0e, 0x1421a9244, 0x1421a9a40, 0x1421a9c58, 0x1421ae362, 0x1421b0cd9, 0x1421b3bc1, 0x1421b5c6d, 0x1421b9103, 0x1421be86c, 0x1421bf331, 0x1421c0c1b, 0x1421c1836, 0x1421c2b51, 0x1421c2bb3, 0x1421c3881, 0x1421c3c33, 0x1421c4237, 0x1421c6d1b, 0x1421cb9b8, 0x1421cddcd, 0x1421cf166, 0x1421cf6b9, 0x1421cf87f, 0x1421d10a8, 0x1421d28b3, 0x1421d323d, 0x1421d36ae, 0x1421d57a3, 0x1421d89f8, 0x1421d9099, 0x1421ea531, 0x1421fde70, 0x1421fe2cb, 0x1422026fd, 0x1422029e8, 0x142203a9f, 0x1422042c7, 0x1422059ec, 0x142206b43, 0x14220707a, 0x1422070f3, 0x1422071c5, 0x14220bc45, 0x14220be4c, 0x14220d8fb, 0x14220d99f, 0x14220f177, 0x14221669e, 0x1422199ae, 0x14221e909, 0x14221eed8, 0x142220825, 0x142222907, 0x142224fc3, 0x142225efd, 0x14222954f, 0x14222b649, 0x14222d149, 0x14222e25c, 0x14222f4ae, 0x1422345fe, 0x142234dcb, 0x1422361b7, 0x142236910, 0x1422383a1, 0x142239d0d, 0x14223d1aa, 0x14223e849, 0x14223f26a, 0x1422402c3, 0x1422441f3, 0x1422445be, 0x142244658, 0x142248997, 0x1422489af, 0x142264af6, 0x142268606, 0x142269caa, 0x14226b859, 0x142270c32, 0x1422713a6, 0x14227846a, 0x1422795dd, 0x142288b6f, 0x142289c5f, 0x14228a47f, 0x14228bc9c, 0x14228ea04, 0x14229418e, 0x142294ae8, 0x1422952da, 0x142296938, 0x142298c59, 0x142298deb, 0x142299c2d, 0x14229a1b6, 0x14229e9cf, 0x14229f915, 0x1422a1f5e, 0x1422a1f89, 0x1422a3d6e, 0x1422a5a2a, 0x1422a6cdd, 0x1422aab42, 0x1422abdbb, 0x1422ad060, 0x1422afcb8, 0x1422b0388, 0x1422b3609, 0x1422b4cd6, 0x1422b8d6c, 0x1422c1261, 0x1422c284d, 0x1422c3694, 0x1422c3b07, 0x1422c4545, 0x1422c4c1a, 0x1422c749b, 0x1422c82d6, 0x1422c93a5, 0x1422c9b7f, 0x1422cd280, 0x1422cd35c, 0x1422ce765, 0x1422cf04f, 0x1422d0d7e, 0x1422d19ce, 0x1422d1a82, 0x1422d59f6, 0x1422e0c1f, 0x1422e2060, 0x1422e327f, 0x1422e75db, 0x1422ea5f5, 0x1422eb66c, 0x1422effb5, 0x1422fdd48, 0x142301f9d, 0x142304932, 0x142304aff, 0x142306954, 0x142307692, 0x142309531, 0x14230a918, 0x14230ae1e, 0x14230bb86, 0x14230db5d, 0x14230e39a, 0x14230e764, 0x142310126, 0x1423101e1, 0x142310a6e, 0x142312a44, 0x1423135e1, 0x142318938, 0x142318cbd, 0x142319027, 0x14231b033, 0x14231d682, 0x14231f220, 0x1423203ed, 0x1423247fa, 0x142326d07, 0x14232b218, 0x14232b597, 0x14232bf9d, 0x1423302a7, 0x142335ba3, 0x142335f0c, 0x1423364af, 0x142336b76, 0x1423398e7, 0x14233aeac, 0x14233b1ac, 0x14233d767, 0x14233e082, 0x14234018b, 0x142343cc2, 0x142346b5b, 0x14234881b, 0x14234c20d, 0x14234c443, 0x14234d136, 0x14234e9bd, 0x14234f69a, 0x142351a0d, 0x1423530ea, 0x14235483f, 0x142355a0c, 0x14236397f, 0x142365c09, 0x142365f4c, 0x1423665fb, 0x14236819b, 0x14236895e, 0x14236efff, 0x142370a88, 0x142372380, 0x1423746df, 0x142378849, 0x142378fee, 0x14237975f, 0x142380bf2, 0x142381caa, 0x1423837a6, 0x14238a4b3, 0x14238b448, 0x14238ddc2, 0x14238e0e5, 0x14238f2ce, 0x142390310, 0x1423905f9, 0x142393e3d, 0x14239581f, 0x1423966ab, 0x142398f23, 0x14239b83c, 0x14239b99c, 0x14239bd7d, 0x14239d22b, 0x14239d713, 0x14239ea25, 0x14239eb9a, 0x1423a0609, 0x1423a164b, 0x1423a4ef1, 0x1423a5140, 0x1423a7b0b, 0x1423a7b73, 0x1423a8cc2, 0x1423a8ec9, 0x1423aa05a, 0x1423aa17c, 0x1423aae7c, 0x1423ab409, 0x1423ab4fe, 0x1423ac5ec, 0x1423ac7ea, 0x1423ad6b9, 0x1423adb0a, 0x1423ae02c, 0x1423b2b21, 0x1423b32be, 0x1423b6f9b, 0x1423b864f, 0x1423b891a, 0x1423b8dc8, 0x1423bb072, 0x1423bc9da, 0x1423bfc25, 0x1423c1268, 0x1423c1c29, 0x1423c5b53, 0x1423c89b0, 0x1423cacfa, 0x1423cb2b8, 0x1423cb7ff, 0x1423cd12f, 0x1423ce451, 0x1423cec95, 0x1423d2147, 0x1423d23c2, 0x1423d7b80, 0x1423d887d, 0x1423d8cda, 0x1423dc647, 0x1423de2c7, 0x1423de9e7, 0x1423e00d2, 0x1423e29f4, 0x1423e40a2, 0x1423e9812, 0x1424a6698, 0x1424a6b90, 0x1424a6f3d, 0x1424a7cef, 0x1424ac388, 0x1424ad24e, 0x1424adab4, 0x1424af466, 0x1424b60d4, 0x1424b65dc, 0x1424b81c9, 0x1424c1c8f, 0x1424c1e27, 0x1424c5d79, 0x1424c78e3, 0x1424c80bc, 0x1424c8a9b, 0x1424cb40b, 0x1424e7597, 0x1424e8325, 0x1424ed290, 0x1425aa822, 0x1425ab467, 0x1425acd59, 0x1425ae13d, 0x1425af901, 0x1425b05b9, 0x1425b0a9d, 0x1425b2f02, 0x1425b62ff, 0x1425b6ffa, 0x1425b757a, 0x1425bbe18, 0x1425bde1a, 0x1425bea6a, 0x1425c007a, 0x1425c09a5, 0x1425c0d19, 0x1425c3934, 0x1425c3da7, 0x1425c97d2, 0x1425cac6a, 0x1425caef7, 0x1425cb1ac, 0x1425cbc2f, 0x1425ced6c, 0x1425cfb40, 0x1425d1a2e, 0x1425d1f67, 0x1425d3893, 0x1425d57d5, 0x1425d96c2, 0x1425da16a, 0x1425db9ef, 0x1425dc1a3, 0x1425dc69d, 0x1425e42a0, 0x1425e6f44, 0x1425e73bc, 0x1425e8da3, 0x1425e8e93, 0x1425ea09f, 0x1425eca71, 0x1425ecfc5, 0x1425eeb13, 0x1425f1668, 0x1425f1728, 0x1425f55f1, 0x1425f65e6, 0x1425f6a97, 0x1425f6df8, 0x1425f7cdf, 0x1425fb0b7, 0x1425fb748, 0x1425fc3d3, 0x1425fd104, 0x1425ff5d7, 0x14260125e, 0x1426015c3, 0x142602fa0, 0x142605d43, 0x14260797b, 0x14260f25b, 0x14260ff09, 0x142610515, 0x142611a2c, 0x1426128bb, 0x1426134fb, 0x1426157b0, 0x142617f00, 0x142617f12, 0x14261ab35, 0x14261bbe2, 0x14261c08d, 0x14261c298, 0x14261cc2b, 0x14261d271, 0x14261d638, 0x14261e9b5, 0x14261f096, 0x14262016d, 0x142620910, 0x1426258d0, 0x14262797c, 0x14262822f, 0x142628404, 0x142628d10, 0x14262a759, 0x14262db46, 0x14262e030, 0x14262e8ec, 0x14262fe03, 0x142632eed, 0x142633698, 0x142634628, 0x142636fba, 0x142637594, 0x14263920a, 0x14263a7d2, 0x1426412fc, 0x1426439f4, 0x142643cde, 0x1426445ad, 0x14264e97b, 0x1426570d0, 0x1426599f8, 0x14265a9fc, 0x14265aa6d, 0x14265bae9, 0x14265d02e, 0x14265d97d, 0x14265e583, 0x142665f03, 0x14266882f, 0x1426688bd, 0x142669d10, 0x14266a873, 0x14266a925, 0x14266fe41, 0x1426713f6, 0x142675f1d, 0x142676281, 0x14267744d, 0x142678b16, 0x14267952a, 0x1426798ae, 0x14267ab13, 0x14267c36f, 0x14267c4fe, 0x14267eb93, 0x14267fe2b, 0x142681818, 0x142683030, 0x1426854c9, 0x142688309, 0x142689033, 0x1426890ec, 0x14268c021, 0x14268c8f6, 0x14268d44f, 0x14268e77f, 0x14268ec46, 0x142693a91, 0x142694c7d, 0x142697387, 0x1426976ad, 0x14269e1d8, 0x1426a2da0, 0x1426a590d, 0x1426a91c2, 0x1426afde4, 0x1426b0195, 0x1426b0650, 0x1426b5bc7, 0x1426ba5b1, 0x1426bd978, 0x1426be2d1, 0x1426c16e1, 0x1426c1e49, 0x1426c3dfd, 0x1426c517d, 0x1426c5ed9, 0x1426c9558, 0x1426c991d, 0x1426c9c9b, 0x1426ca3bc, 0x1426caf2a, 0x1426cc8fd, 0x1426d002b, 0x1426d3f94, 0x1426d471e, 0x1426d4856, 0x1426d62ac, 0x1426d79c2, 0x1426d7aa8, 0x1426d82f4, 0x1426d95ef, 0x1426ddd4e, 0x1426e2b8e, 0x1426e35c5, 0x1426e4744, 0x1426e47bf, 0x1426e5007, 0x1426e67a3, 0x1426ef920, 0x1426f13fe, 0x1426f2ea2, 0x1426f3d66, 0x1426f425b, 0x1426f5100, 0x1426f96e7, 0x1426f9d37, 0x1426fca6a, 0x1426fd482, 0x1426fe1c7, 0x1426ff0f4, 0x142700b92, 0x1427028fc, 0x142703277, 0x142704052, 0x14270408b, 0x142705b7b, 0x142706b1e, 0x14270ac2f, 0x14270e12d, 0x14270e1c7, 0x142715be5, 0x142716b82, 0x14271704f, 0x14271bd2a, 0x14271c432, 0x14271ce97, 0x14271d2b2, 0x142723d7a, 0x142724322, 0x142724b11, 0x14272af8f, 0x142730e2a, 0x14273120c, 0x142732165, 0x142736b2b, 0x142736d6d, 0x14273c902, 0x14273d88d, 0x14273e496, 0x1427407a6, 0x142740926, 0x1427429d1, 0x142743646, 0x142745f26, 0x1427481dd, 0x142748e4b, 0x1427490d7, 0x142750c80, 0x142750f13, 0x142755154, 0x1427552a9, 0x142755357, 0x1427556ca, 0x14275ca85, 0x14275e905, 0x14276127f, 0x1427642a2, 0x1427651aa, 0x142766ce0, 0x1427677dc, 0x142768370, 0x14276841e, 0x14276872b, 0x14276ae91, 0x14276f963, 0x14276f98e, 0x14277074f, 0x142771ee2, 0x142772c64, 0x142772ea7, 0x1427742da, 0x142776d07, 0x142778cfc, 0x142778ecb, 0x142779644, 0x14277971b, 0x142779e71, 0x142779f3a, 0x14277b5aa, 0x1427b8427, 0x1427b855e, 0x1427b8a0b, 0x1427b9e68, 0x1427bb62f, 0x1427bb88b, 0x1427be1be, 0x1427bfdbe, 0x1427c09d5, 0x1427c3120, 0x1427c3c12, 0x1427c6b3a, 0x1427c9b18, 0x1427ca975, 0x1427cbd57, 0x1427ce852, 0x1427d2d4b, 0x1427d3fc9, 0x1427d4f80, 0x1427d6b2a, 0x1427d7659, 0x1427de1e9, 0x1427dea6d, 0x1427debf6, 0x1427dfc72, 0x1427e36e4, 0x1427e3f0e, 0x1427e64f4, 0x1427e658a, 0x1427ea306, 0x1427eb0b7, 0x1427edea3, 0x1427ee937, 0x1427ef102, 0x1427f1fd1, 0x1427f41c6, 0x1427fba94, 0x1427fc04f, 0x1427fce1d, 0x14280055e, 0x142800962, 0x142800fc0, 0x142802c65, 0x142805e51, 0x1428073ee, 0x142807a5f, 0x14280ace8, 0x14280e907, 0x14280ea48, 0x142811759, 0x1428129d7, 0x142816205, 0x14281904b, 0x14281b619, 0x14281d67b, 0x14281ef9a, 0x142822a6f, 0x142822bad, 0x142823465, 0x14282bcf6, 0x14282df40, 0x1428302e3, 0x14283417c, 0x142837025, 0x1428382d6, 0x14283b486, 0x14283c498, 0x14283e670, 0x142841899, 0x142849302, 0x14284a921, 0x1428524a4, 0x142853e90, 0x142854074, 0x142857a6c, 0x142857d07, 0x1428587b6, 0x142859c8b, 0x14285a0c7, 0x14285c409, 0x14285c606, 0x14285c6d9, 0x14285f690, 0x1428636f2, 0x142865302, 0x14286d15e, 0x1428744cc, 0x142876807, 0x14287706f, 0x14287b614, 0x14287be98, 0x14287c280, 0x14287f645, 0x142882a0f, 0x142883295, 0x14289120e, 0x142892193, 0x1428924cb, 0x142893e44, 0x142894129, 0x14289432b, 0x1428943ac, 0x142896fba, 0x1428a5947, 0x1428a6a21, 0x1428a7f0e, 0x1428a862b, 0x1428a9443, 0x1428ac40f, 0x1428ad189, 0x1428ae605, 0x1428b07d4, 0x1428b5231, 0x1428b6c62, 0x1428b74b6, 0x1428b7eb3, 0x1428bb0bb, 0x1428bf8c9, 0x1428c1474, 0x1428c3a8d, 0x1428c540b, 0x1428c6e08, 0x1428c7686, 0x1428c827c, 0x1428c8d43, 0x1428cb61f, 0x1428cdbbe, 0x1428cddb9, 0x1428cdeb6, 0x1428cf169, 0x1428cf680, 0x1428d0acc, 0x1428d173b, 0x1428d1b2e, 0x1428d1c86, 0x1428d2b10, 0x1428d3d46, 0x1428d656c, 0x1428d9dd9, 0x1428da39e, 0x1428df1e7, 0x1428e89fe, 0x1428e8c42, 0x1428ea965, 0x1428ec674, 0x1428ec8c6, 0x1428f1a06, 0x1428f1c28, 0x1428f3904, 0x1428f4995, 0x1428f6a1d, 0x1428fb831, 0x1428ff029, 0x1428ff94b, 0x1428ffc83, 0x14290387f, 0x142907ad1, 0x14290d8eb, 0x14290da7b, 0x14290e658, 0x1429118df, 0x142913139, 0x142917756, 0x142917909, 0x1429185f3, 0x1429187b2, 0x142918814, 0x1429188fc, 0x14291a523, 0x14291b005, 0x14291b72f, 0x14291e68f, 0x14291e851, 0x142921597, 0x1429217b7, 0x142921c23, 0x1429239be, 0x142923a59, 0x1429241b9, 0x142925062, 0x142925deb, 0x1429271a9, 0x142927a29, 0x1429281f7, 0x142928c1c, 0x14292bfea, 0x142930f46, 0x14293499c, 0x1429349e3, 0x142938e3d, 0x14293af81, 0x14293cefd, 0x14293e58d, 0x14294a079, 0x142951abd, 0x1429571f1, 0x142958885, 0x14295a6e2, 0x14295a873, 0x14295d2f3, 0x14295ea0c, 0x14295f551, 0x1429611a2, 0x1429619be, 0x142967c56, 0x142968c71, 0x14296c5d8, 0x14296f3b7, 0x142970f35, 0x1429732af, 0x142974793, 0x142975300, 0x142979b75, 0x14297c114, 0x14297d5bc, 0x14297dde4, 0x14297eb47, 0x142980646, 0x142983cb8, 0x142984c23, 0x14298714d, 0x142987527, 0x142987dd1, 0x142987f3d, 0x14298890a, 0x14298a713, 0x14298b067, 0x14298b0ab, 0x1429906eb, 0x142991bfa, 0x14299338e, 0x14299426c, 0x142994f96, 0x14299511e, 0x142996df7, 0x14299b0d1, 0x14299ba9a, 0x14299dd38, 0x1429a0ee9, 0x1429a2345, 0x1429a33b3, 0x1429a4bdf, 0x1429a592c, 0x1429a5c2e, 0x1429b0f00, 0x1429b9b79, 0x1429ba16e, 0x1429ba518, 0x1429bc6d6, 0x1429bdcf8, 0x1429bed83, 0x1429bf025, 0x1429c061d, 0x1429c12bb, 0x1429c18c6, 0x1429c1c6b, 0x1429c8420, 0x1429c8913, 0x1429c8aa8, 0x1429ca46b, 0x1429cd104, 0x1429cd2bd, 0x1429d2e72, 0x1429d3103, 0x1429d4786, 0x1429d7c90, 0x1429d91fa, 0x1429d97af, 0x1429db7c9, 0x1429db9d4, 0x1429dd4de, 0x1429dd792, 0x1429ddc10, 0x1429e1936, 0x1429e21b1, 0x1429e3077, 0x1429e3995, 0x1429e433d, 0x1429e4863, 0x1429e491c, 0x1429e52df, 0x1429e54cf, 0x142a0eb26, 0x142a0ff23, 0x142a12702, 0x142a1be58, 0x142a1c90e, 0x142a1cb72, 0x142a1d0f9, 0x142a1f246, 0x142a213f0, 0x142a240ec, 0x142a2433a, 0x142a27b63, 0x142a2900e, 0x142a29a48, 0x142a2a748, 0x142a3149c, 0x142a3544b, 0x142a35b6d, 0x142a37bfd, 0x142a38af0, 0x142a38e46, 0x142a398cd, 0x142a3a511, 0x142a3b5cb, 0x142a3ba3c, 0x142a3c621, 0x142a3ddbc, 0x142a434d2, 0x142a4a06e, 0x142a4a497, 0x142a4aabc, 0x142a4b0ce, 0x142a4b318, 0x142a4c00c, 0x142a4f0ba, 0x142a4f2ea, 0x142a50475, 0x142a53d32, 0x142a54c50, 0x142a55745, 0x142a57c99, 0x142a57f6f, 0x142a5839c, 0x142a5bb65, 0x142a5c081, 0x142a5e42e, 0x142a5ff48, 0x142a5ffc2, 0x142a607a4, 0x142a618da, 0x142a6215f, 0x142a623cc, 0x142a63747, 0x142a68c14, 0x142a69094, 0x142a6a689, 0x142a6b1c9, 0x142a6b88e, 0x142a6df04, 0x142a6effa, 0x142a6fbd7, 0x142a75bac, 0x142a7bbb4, 0x142a7c60d, 0x142a7e696, 0x142a7edec, 0x142a7fc69, 0x142a86086, 0x142a868ec, 0x142a8b6a5, 0x142a8e2d2, 0x142a91e0e, 0x142a93ab2, 0x142a95cd8, 0x142a9620b, 0x142a963ef, 0x142a98329, 0x142ab55ad, 0x142ab5ee0, 0x142abb321, 0x142abbee1, 0x142abd28e, 0x142abd7f4, 0x142abdd0b, 0x142ac2a3d, 0x142ac4129, 0x142ac6255, 0x142ac7c9a, 0x142ac8e2d, 0x142ac908e, 0x142ac95a1, 0x142ac98d1, 0x142acf2e5, 0x142ad3857, 0x142ad5b6e, 0x142ad5fbf, 0x142ad7f4a, 0x142ad954f, 0x142ad99cf, 0x142ad9b55, 0x142ad9faf, 0x142ae0f3c, 0x142ae2bc4, 0x142ae3b3b, 0x142ae55a3, 0x142ae6428, 0x142ae672f, 0x142ae7d81, 0x142ae8c6a, 0x142ae9c02, 0x142aee5a1, 0x142aee925, 0x142aeea6e, 0x142aeeeb1, 0x142af1107, 0x142af5170, 0x142af6c9b, 0x142af7cba, 0x142afa6c5, 0x142b01bad, 0x142b0351e, 0x142b051dd, 0x142b08b2c, 0x142b09636, 0x142b0a1a2, 0x142b0b27c, 0x142b0c07d, 0x142b0cd82, 0x142b0dbf7, 0x142b0e4f3, 0x142b13cc5, 0x142b15415, 0x142b16146, 0x142b163ca, 0x142b17c47, 0x142b1ac0b, 0x142b1efdf, 0x142b244e2, 0x142b2547e, 0x142b2784c, 0x142b2914c, 0x142b2db88, 0x142b30cea, 0x142b32620, 0x142b354c4, 0x142b3633e, 0x142b38108, 0x142b383b6, 0x142b3ca61, 0x142b3d48c, 0x142b3ea3a, 0x142b3eb1a, 0x142b40666, 0x142b4087d, 0x142b42c20, 0x142b461a2, 0x142b46a40, 0x142b47fbf, 0x142b482a5, 0x142b4974f, 0x142b4ad17, 0x142b4b865, 0x142b4c524, 0x142b4cc30, 0x142b4cfe7, 0x142b52729, 0x142b53c27, 0x142b5659d, 0x142b5c467, 0x142b5db6f, 0x142b5ea1d, 0x142b5f72a, 0x142b6b8ff, 0x142b6c1eb, 0x142b6dd76, 0x142b6e4ac, 0x142b6ebe6, 0x142b718ae, 0x142b7f945, 0x142b816ad, 0x142b819a4, 0x142b82c6b, 0x142b84e77, 0x142b8575b, 0x142b87085, 0x142b872bc, 0x142b88ac9, 0x142b8c56e, 0x142b8d206, 0x142b8d74c, 0x142b8e798, 0x142b8ea4c, 0x142b93242, 0x142b94013, 0x142b94745, 0x142b9710d, 0x142b980ab, 0x142b9c32c, 0x142b9dfd3, 0x142b9f138, 0x142ba2da8, 0x142ba42d7, 0x142bab257, 0x142bab45d, 0x142babf8a, 0x142bac4c5, 0x142baf158, 0x142bb1f7e, 0x142bb227e, 0x142bb288b, 0x142bb548e, 0x142bb5b6d, 0x142bb69d4, 0x142bb7876, 0x142bb919b, 0x142bbd553, 0x142bc4e7b, 0x142bc55d7, 0x142bca2c4, 0x142bce537, 0x142bcf20a, 0x142bcf2c7, 0x142bcf5c3, 0x142bd10b0, 0x142bd2d06, 0x142bda649, 0x142bde853, 0x142bdf4de, 0x142be023a, 0x142be40ca, 0x142be41f0, 0x142be6b69, 0x142be78d8, 0x142be7a16, 0x142beb167, 0x142befd6f, 0x142bf2489, 0x142bf2787, 0x142bf468a, 0x142bf63ab, 0x142bf6d88, 0x142bf78c6, 0x142bf8c07, 0x142bfa714, 0x142bfc56d, 0x142bfd763, 0x142bfdd9d, 0x142c08473, 0x142c0bf68, 0x142c0d7ef, 0x142c0e9fc, 0x142c0f00a, 0x142c0f4e6, 0x142c106db, 0x142c1082b, 0x142c12d97, 0x142c14564, 0x142c1686f, 0x142c1798a, 0x142c17ea9, 0x142c18f98, 0x142c1ab48, 0x142c331b5, 0x142c33b65, 0x142c35e00, 0x142c36bdb, 0x142c378b9, 0x142c382dc, 0x142c38c50, 0x142c3b048, 0x142c3ce30, 0x142c3e188, 0x142c3e550, 0x142c4176d, 0x142c420af, 0x142c45665, 0x142c45a58, 0x142c4ad25, 0x142c4ba87, 0x142c50f40, 0x142c511d6, 0x142c52323, 0x142c55821, 0x142c559a3, 0x142c59b43, 0x142c5c402, 0x142c5c484, 0x142c5e500, 0x142c5f030, 0x142c67aee, 0x142c69521, 0x142c6e968, 0x142c6f931, 0x142c724bb, 0x142c74b7c, 0x142c79ab6, 0x142c7a129, 0x142c7c358, 0x142c7e811, 0x142c7ec1b, 0x142c809e7, 0x142c83255, 0x142c84a93, 0x142c91b1d, 0x142c92030, 0x142c92bca, 0x142c9460c, 0x142c9d4f4, 0x142c9fa01, 0x142ca0775, 0x142ca0c4d, 0x142ca116c, 0x142ca2f09, 0x142ca3070, 0x142ca3148, 0x142ca3c17, 0x142ca48ee, 0x142ca635f, 0x142ca6fda, 0x142ca81d9, 0x142ca993a, 0x142caa586, 0x142cac0ba, 0x142cae5f3, 0x142cb0bfb, 0x142cb22b7, 0x142cb2ee4, 0x142cb3c6c, 0x142cb3e75, 0x142cb41b2, 0x142cb5610, 0x142cb6f4b, 0x142cb8bc4, 0x142cba906, 0x142cbd2c5, 0x142cbe93e, 0x142cbea97, 0x142cc2eeb, 0x142cc3102, 0x142cc6174, 0x142cc82ae, 0x142cc8bee, 0x142cc95bf, 0x142cce3ae, 0x142ccfa34, 0x142cd3267, 0x142cd556d, 0x142cd903a, 0x142cdca0b, 0x142cdd301, 0x142cdd63c, 0x142cdf5e6, 0x142cdf8c5, 0x142ce187a, 0x142ce36be, 0x142ce48fa, 0x142ce8995, 0x142ceaa56, 0x142cf08fe, 0x142cf1c8f, 0x142cf389f, 0x142cf44f9, 0x142cf8051, 0x142cf9d79, 0x142cf9df0, 0x142cfa3e1, 0x142cfae54, 0x142cfd003, 0x142cfd5dd, 0x142d0069f, 0x142d0087e, 0x142d00f38, 0x142d04563, 0x142d05238, 0x142d06616, 0x142d0699e, 0x142d07599, 0x142d08382, 0x142d08c50, 0x142d092bf, 0x142d09369, 0x142d0ab27, 0x142d0c448, 0x142d0e03a, 0x142d0f54f, 0x142d0fb3a, 0x142d10e3f, 0x142d1410d, 0x142d1540c, 0x142d188ab, 0x142d3dfa8, 0x142d45e57, 0x142d46975, 0x142d4c6be, 0x142d4d959, 0x142d4f68f, 0x142d4fd9a, 0x142d50087, 0x142d553e3, 0x142d574ee, 0x142d57985, 0x142d5861d, 0x142d59d55, 0x142d5a74a, 0x142d5a839, 0x142d5fe58, 0x142d61cb0, 0x142d620dd, 0x142d630d3, 0x142d65ae7, 0x142d6d653, 0x142d6f750, 0x142d6fa30, 0x142d6fdd5, 0x142d70448, 0x142d72f2d, 0x142d7a08e, 0x142d7ca88, 0x142d827d2, 0x142d83589, 0x142d85ebe, 0x142d85fd8, 0x142d86f66, 0x142d8814c, 0x142d8a6e1, 0x142d8bbe5, 0x142d8be13, 0x142d8c4e4, 0x142d8d160, 0x142d90ade, 0x142d92fb2, 0x142d93cd6, 0x142d94bce, 0x142d95859, 0x142d9d1dc, 0x142d9d463, 0x142d9d9dd, 0x142da0faa, 0x142da173f, 0x142da298a, 0x142da378f, 0x142da79bb, 0x142daa152, 0x142dad26d, 0x142daea36, 0x142db0a02, 0x142db0f14, 0x142db35f7, 0x142db5bd6, 0x142db5dac, 0x142db9473, 0x142db9889, 0x142db9990, 0x142dbd529, 0x142dbddd8, 0x142dbed91, 0x142dbee54, 0x142dbf574, 0x142dc185e, 0x142dc39dc, 0x142dc4be0, 0x142dc541b, 0x142dc544f, 0x142dc5dd6, 0x142dc6869, 0x142dc7230, 0x142dc7e04, 0x142dc875f, 0x142dc8a22, 0x142dca692, 0x142dcc5c2, 0x142dcd9c6, 0x142dce162, 0x142dd32b5, 0x142dd81e9, 0x142dd8ae2, 0x142df6509, 0x142df67bb, 0x142df6834, 0x142df7895, 0x142df893b, 0x142df9174, 0x142e1102d, 0x142e11d91, 0x142e11e25, 0x142e12885, 0x142e130fb, 0x142e14e40, 0x142e165bb, 0x142e1b155, 0x142e1cf5f, 0x142e2075d, 0x142e2122c, 0x142e21800, 0x142e21fd9, 0x142e23e1d, 0x142e24682, 0x142e249bb, 0x142e2568c, 0x142e26db2, 0x142e27690, 0x142e28115, 0x142e28b9b, 0x142e299ef, 0x142e2a194, 0x142e2ad7b, 0x142e2dae9, 0x142e2dcb7, 0x142e302dd, 0x142e32ba4, 0x142e33274, 0x142e345da, 0x142e346fb, 0x142e3995c, 0x142e3c3c5, 0x142e3ccf8, 0x142e3ce38, 0x142e3e236, 0x142e3ef86, 0x142e409f6, 0x142e41801, 0x142e45f08, 0x142e4bc6f, 0x142e4d729, 0x142e503b9, 0x142e5078d, 0x142e53425, 0x142e53549, 0x142e54168, 0x142e546d5, 0x142e55054, 0x142e553da, 0x142e55bdf, 0x142e55ff3, 0x142e56e76, 0x142e574fd, 0x142e57c1c, 0x142e582f7, 0x142e5b60d, 0x142e5bf95, 0x142e5c156, 0x142e5d8d5, 0x142e617dc, 0x142e62127, 0x142e6444c, 0x142e664c3, 0x142ead9e6, 0x142eaf817, 0x142eaf9e9, 0x142eb2507, 0x142eb2ef6, 0x142eb3b97, 0x142eb6edd, 0x142eb807e, 0x142eb8e9f, 0x142eba580, 0x142ebd355, 0x142ec2059, 0x142ec2539, 0x142ec3516, 0x142ec3b99, 0x142ec9daa, 0x142ecb48f, 0x142ecbd06, 0x142ecc1f2, 0x142ecc3e6, 0x142ecc461, 0x142eccd1f, 0x142ecd03f, 0x142ecd1d5, 0x142ecd663, 0x142ecd7e8, 0x142ed2b94, 0x142ed30f7, 0x142ed648f, 0x142ed778b, 0x142eda90e, 0x142edaa24, 0x142edb359, 0x142edd99e, 0x142eddd3a, 0x142edeec7, 0x142ee082c, 0x142ee0905, 0x142ee2546, 0x142ee3411, 0x142ee3600, 0x142ee63c4, 0x142ee894e, 0x142ee952b, 0x142ee98bd, 0x142ee9bc7, 0x142eec931, 0x142eecfa1, 0x142eede5d, 0x142ef1665, 0x142ef37e0, 0x142ef545f, 0x142ef9e08, 0x142efa12a, 0x142efcb3b, 0x142efdd61, 0x142f0c740, 0x142f0e578, 0x142f0ee90, 0x142f104d1, 0x142f1376c, 0x142f13f7c, 0x142f14710, 0x142f16f5b, 0x142f1a479, 0x142f1a5f0, 0x142f1acbd, 0x142f1af2f, 0x142f1fb93, 0x142f2080f, 0x142f231f9, 0x142f26326, 0x142f27c05, 0x142f288e8, 0x142f294cb, 0x142f29f2b, 0x142f2f3ab, 0x142f300a4, 0x142f340ec, 0x142f3780a, 0x142f3b540, 0x142f3b989, 0x142f3c60f, 0x142f3c760, 0x142f3cc1d, 0x142f3d8d9, 0x142f3e7d9, 0x142f3eaf8, 0x142f41613, 0x142f41e11, 0x142f4234c, 0x142f47d9e, 0x142f4844c, 0x142f4b004, 0x142f53798, 0x142f53853, 0x142f5500f, 0x142f57d80, 0x142f586c9, 0x142f5d62e, 0x142f5e961, 0x142f5fa01, 0x142f6185b, 0x142f66cc4, 0x142f67748, 0x142f6780b, 0x142f6c200, 0x142f6d50f, 0x142f6d733, 0x142f6f596, 0x142f72bc2, 0x142f742b0, 0x142f75112, 0x142f77e32, 0x142f7b1fb, 0x142f7b302, 0x142f7b592, 0x142f7bfe0, 0x142f7c656, 0x142f7d636, 0x142f7e102, 0x142f80708, 0x142f82f3b, 0x142f83cb2, 0x142f84f00, 0x142f868c0, 0x142f86932, 0x142f88517, 0x142f8a7f5, 0x142f8ba5e, 0x142f8c462, 0x142f8cba6, 0x142f8f8ea, 0x142f95e3d, 0x142f964e0, 0x142f968f9, 0x142f97bcc, 0x142f99778, 0x142f9e7cc, 0x142fa2cfe, 0x142fa77c1, 0x142fa7d9e, 0x142fa818d, 0x142fa930d, 0x142fa9425, 0x142fa95df, 0x142fab65e, 0x142fabb7b, 0x142fb1c36, 0x142fb3113, 0x142fb6ec4, 0x142fb7477, 0x142fba8ec, 0x142fbe8e5, 0x142fc0863, 0x142fc1e5a, 0x142fc234d, 0x142fc3a53, 0x142fd39bc, 0x142fd4e18, 0x142fd8d18, 0x142fdd74f, 0x142fde086, 0x142fdf2b6, 0x142fe1da5, 0x142fe2903, 0x142fe48fa, 0x142fe5c23, 0x142fe6d96, 0x142fe8884, 0x142fec7f0, 0x142fecb82, 0x142ff1178, 0x142ff636d, 0x142ff8969, 0x142ff8bfa, 0x142ff9589, 0x142ff9905, 0x142ffa1e7, 0x142ffcff2, 0x142ffe2e2, 0x142fff438, 0x1430028d6, 0x143003142, 0x1430041d1, 0x143009188, 0x14300fb10, 0x1430149c6, 0x143014e7b, 0x143015a87, 0x14301672a, 0x143018443, 0x14301a8b0, 0x14301de9d, 0x143020334, 0x143020588, 0x143028c36, 0x143028f27, 0x14302bca3, 0x14302c0c4, 0x14302c300, 0x143032cfb, 0x14303302b, 0x143033688, 0x143034f6d, 0x143036168, 0x143036f01, 0x143040a4a, 0x14304221f, 0x143042fa5, 0x14304353c, 0x1430446fe, 0x143046718, 0x14304b671, 0x14304ce9f, 0x14304f0a6, 0x143050095, 0x143051403, 0x1430520f8, 0x143055276, 0x1430557d7, 0x143056edc, 0x1430588ff, 0x1430598ac, 0x14305a08d, 0x14305a9c7, 0x14305bbf1, 0x14305cc89, 0x14305d171, 0x14305d369, 0x14305d710, 0x14305db21, 0x143062b96, 0x1430632d6, 0x143065a8b, 0x143065dee, 0x14306f139, 0x1430705d3, 0x143070ff4, 0x143071296, 0x14307146c, 0x143071adb, 0x1430734fe, 0x14307730b, 0x1430773de, 0x14307a66b, 0x14307b64e, 0x14307db59, 0x14307e6c2, 0x14307f482, 0x1430851d2, 0x1430858e2, 0x143089980, 0x14308b79a
[long[]] $hash6 = 0x142208c29, 0x1423aa82d, 0x1424c6fd6, 0x142e2d056, 0x142a4c89c, 0x142f1467a, 0x142833fb9, 0x142b37c8a, 0x142f64260, 0x1426907fe, 0x1427ba371, 0x142f12ac5, 0x142864dfb, 0x142bc962a, 0x142ff5525, 0x142ed7af3, 0x142f63b40, 0x142ed7771, 0x1426c66ee, 0x142f15562, 0x1422a1cbd, 0x1424dab1e, 0x142235120, 0x14210d3a1, 0x14128d883, 0x142f5db4b, 0x14202ee8b, 0x1420313e3, 0x14203176d, 0x140048795, 0x14221a94c, 0x142041a0e, 0x142ef6e42, 0x142042f86, 0x1428fd5ec, 0x14204a54d, 0x142cda643, 0x14204ca3f, 0x142a6855e, 0x14206ea01, 0x1420733ad, 0x142336b6b, 0x14003f5d5, 0x1420ae48d, 0x1420bbdc0, 0x1420bffdf, 0x1420c1ec6, 0x1422e5975, 0x1420d60bd, 0x1420d9f3f, 0x1423aa40f, 0x142fde4b9, 0x1420e2247, 0x1420e73a6, 0x1420e80ac, 0x14239474c, 0x1420f36d5, 0x142db5b53, 0x1428b856a, 0x1429d1fa0, 0x142cda684, 0x142cd2526, 0x142609d44, 0x1427bceb8, 0x142ff0e70, 0x142b8cb34, 0x142cfdf5e, 0x142774ec2, 0x140770c44, 0x142ac87f2, 0x142132b7a, 0x14213307e, 0x142adc2d4, 0x142bf26ae, 0x142171dcc, 0x142ac944b, 0x142279eae, 0x14217d2b4, 0x1423e6209, 0x142b9426e, 0x142ba0924, 0x14218e26f, 0x14308b4d7, 0x14282ef5b, 0x142194df5, 0x142edfc68, 0x1428fcc63, 0x1421ae2ba, 0x142367caa, 0x1421b58fe, 0x142af9baf, 0x1400462a5, 0x142fd7458, 0x1421cff15, 0x1421d30f6, 0x1421d3fb4, 0x1421da301, 0x1426bac3a, 0x1421eb44a, 0x143065925, 0x140046945, 0x142208aee, 0x142eb810d, 0x1429e54ee, 0x14221a78e, 0x14221c576, 0x14221ded2, 0x14222038d, 0x142225d25, 0x142227170, 0x142234d71, 0x1423e801a, 0x14224162d, 0x14268be80, 0x142ae1a40, 0x1427ed9bc, 0x140048e15, 0x140047045, 0x14227b37b, 0x14227d199, 0x1429b0b65, 0x142caa8e1, 0x142287dc2, 0x142d3e0a9, 0x1421acf35, 0x142fb56ae, 0x142c51b16, 0x1422b2492, 0x1422b910d, 0x1429b249f, 0x1422bd9e1, 0x142dd83b7, 0x14280c1f7, 0x142735fec, 0x1422c94d6, 0x142ed2e73, 0x1422cb2d7, 0x142b1a534, 0x142be9bfc, 0x1422e24a5, 0x142c7455e, 0x14239867e, 0x14292f607, 0x1422eff88, 0x142e35f52, 0x14230534c, 0x14230e0de, 0x1403e85d5, 0x142e66f06, 0x14231ad65, 0x14231d1b6, 0x14237c75e, 0x142328e3b, 0x1423296f9, 0x142329e37, 0x14232abeb, 0x1423300a3, 0x142bba6ba, 0x1409a87c5, 0x142cc3ff5, 0x142bbadcd, 0x14233f8aa, 0x14233fe06, 0x14003edb5, 0x142347df4, 0x14003f955, 0x1428d7abc, 0x14236c297, 0x14003bf95, 0x14237bc3b, 0x142383d89, 0x14238ab41, 0x1422bfc6b, 0x14239063b, 0x14214278a, 0x1423970c0, 0x14239e645, 0x1423a1163, 0x1423a1bc0, 0x142b4f86c, 0x142032549, 0x1423aa56f, 0x1423b8bc5, 0x1423bb797, 0x1429071ab, 0x1423c4c5b, 0x142b2ae13, 0x1423c7103, 0x1422d37fb, 0x142ced21a, 0x140da7945, 0x1423e593d, 0x1424ac2aa, 0x1424b2e9c, 0x1424b675b, 0x142a2d704, 0x1424c5bda, 0x1424cbeb3, 0x1424e8a43, 0x1424efd22, 0x1425ab7cc, 0x1425b769b, 0x1428f7aba, 0x1425c401c, 0x1425c7158, 0x14003d6b5, 0x1425d34fa, 0x142d811ca, 0x1425d9e42, 0x1425dbe58, 0x1425de731, 0x1425e05bc, 0x142b88d60, 0x1425e5962, 0x143004587, 0x1425f9567, 0x1425fd6b9, 0x1422fe02d, 0x14260a26f, 0x14261a78d, 0x14261b5b1, 0x1409547a5, 0x14262af5f, 0x14262b99e, 0x14262cff3, 0x142322c90, 0x1426309f6, 0x1426328aa, 0x1426384bb, 0x142645957, 0x142235a67, 0x14265982b, 0x142667b57, 0x142b84e6c, 0x1426cb269, 0x142678a1c, 0x1409c8734, 0x142a81f1e, 0x14061a844, 0x14269f448, 0x14269f691, 0x1426a0e48, 0x142db1dda, 0x1426a2bc8, 0x1426b0267, 0x14236742a, 0x143073433, 0x1426cb821, 0x1426ccb3e, 0x1426cfcdf, 0x1429dd52a, 0x142b0b637, 0x1426e3afe, 0x1426e3b95, 0x1426e6928, 0x1427ee3a1, 0x142371fbc, 0x1426fe147, 0x142365f93, 0x140581795, 0x142705bd6, 0x142708c55, 0x1427099d6, 0x140044325, 0x14296693a, 0x1428feb1c, 0x14271e646, 0x14272563d, 0x14272ab02, 0x14272ab3e, 0x1406f2774, 0x14272ebab, 0x1427317c9, 0x142ae755a, 0x1427374fc, 0x14206aed2, 0x14273f442, 0x142745000, 0x14294ff71, 0x142752c7a, 0x142173c4d, 0x142db0cb6, 0x142df552e, 0x142759b51, 0x14275a0fa, 0x142763789, 0x14276b2ae, 0x14276eab8, 0x14276f51b, 0x1427bfe40, 0x142a50744, 0x1427c4974, 0x1427c6649, 0x1427ceacd, 0x1427dba05, 0x14295a45e, 0x142b5498c, 0x142039fdb, 0x1427e8241, 0x1421b02fb, 0x1427fd627, 0x142cf28ce, 0x142b09f1a, 0x142803fc5, 0x142294f66, 0x14280ab63, 0x142ccb66b, 0x142811e88, 0x1428bb24b, 0x142b80887, 0x14217bf6c, 0x1428287ec, 0x1400438a5, 0x14282a015, 0x14282a5ad, 0x14307a5ff, 0x14003dbd5, 0x14283449a, 0x142c38388, 0x1428dc68a, 0x14231c9ce, 0x142859a17, 0x142863e57, 0x14207698f, 0x14287197f, 0x142b942b3, 0x1409f5293, 0x1429241e5, 0x1428979eb, 0x142a18fb6, 0x1428b10e9, 0x142919d9d, 0x1428b6fc0, 0x1428bb3fc, 0x1400d7d43, 0x14233ed10, 0x142624638, 0x1428cb4f5, 0x1428d2a31, 0x1428d2d5d, 0x1428d56a0, 0x142275d57, 0x1428da6dd, 0x1428e33e5, 0x142ac5ca8, 0x1428ec184, 0x1425d111b, 0x142e2221a, 0x142af77b1, 0x142b37bd2, 0x142a20f2c, 0x142911a32, 0x1429168b9, 0x142bebb61, 0x142921f84, 0x1420ae1f2, 0x142a906d9, 0x142d11b76, 0x142935f16, 0x142938b1f, 0x142bdc387, 0x1429509b5, 0x14295d394, 0x14295e0a6, 0x14295e1e4, 0x1429c03b6, 0x1429a015c, 0x140045c45, 0x1408c7c44, 0x142eeb618, 0x141074a55, 0x14297d001, 0x1429836dd, 0x1400b3a05, 0x14298968a, 0x1409a1425, 0x142991386, 0x14299cf14, 0x14299d8b6, 0x1429a20cf, 0x142b3dd51, 0x1429cb533, 0x1429dd1f6, 0x14004a505, 0x142a146b3, 0x14301e8e6, 0x142a3617f, 0x142608cc5, 0x142a3934b, 0x140043465, 0x142c65bf0, 0x142a7f89d, 0x142a4ac93, 0x142a4ca52, 0x142a5697e, 0x142a60d63, 0x1409ecd15, 0x14003a385, 0x142c5229c, 0x142f45af1, 0x142bcf5b8, 0x14291c990, 0x14302bede, 0x142a899ab, 0x142177950, 0x143058c03, 0x14271b65c, 0x142ab881b, 0x1409cb225, 0x1423a09bf, 0x142e31298, 0x142acc803, 0x1426058c1, 0x142adf5a2, 0x14003f2d5, 0x1425c5573, 0x142aeddce, 0x142986d0a, 0x142f4b48f, 0x142afa01a, 0x140f52335, 0x14291e644, 0x142d98d30, 0x142d09c15, 0x14216e727, 0x142b2749a, 0x142b024aa, 0x142b2fce7, 0x140c31d45, 0x142b39c6b, 0x142a23c88, 0x142b47e20, 0x142b4f71a, 0x142b6e0a3, 0x1420e2bfa, 0x142e6277c, 0x142b8be22, 0x142f20318, 0x142b8f490, 0x142b998e1, 0x14281c566, 0x1423ca1a3, 0x142d9e066, 0x14273e4ba, 0x142bb0afe, 0x1423a4a48, 0x1428baa41, 0x142bc099d, 0x142bc2600, 0x142c7af3c, 0x142bd071a, 0x142bd0de9, 0x142bd47e0, 0x142cfe8a7, 0x142bd6d47, 0x142e4b514, 0x142603eb8, 0x142bdea70, 0x142ca987c, 0x142be8a37, 0x142bf2c85, 0x142b8e2ae, 0x142edff0f, 0x1425ff55d, 0x142722ec5, 0x14304c8aa, 0x142dc5e7b, 0x142c331f7, 0x140d7f085, 0x142c3edf1, 0x142cd1947, 0x142c4937e, 0x142c4bbe4, 0x14303f080, 0x1429b99a7, 0x1424b1cf2, 0x140a7f075, 0x142c76c2a, 0x142101882, 0x142c7a754, 0x142c7b574, 0x14295ee89, 0x1407ef635, 0x14226e11c, 0x142c92501, 0x142664e57, 0x142c9c78b, 0x142692e6c, 0x142ebe89c, 0x142066bf9, 0x142cb9309, 0x1425c23fc, 0x140d0c994, 0x14305d03d, 0x142d6db47, 0x142816a3a, 0x142dfd9b4, 0x140045c85, 0x142d05219, 0x142d0f62c, 0x14003cf75, 0x143085126, 0x142d4abf6, 0x14277576a, 0x142e2a227, 0x142d51218, 0x14211d85a, 0x1423267a2, 0x1421ca84e, 0x1428a6209, 0x142196638, 0x142d6fe52, 0x142fb5d9f, 0x142d78925, 0x142d7f4f8, 0x142a7e4ca, 0x142dc742f, 0x142d8893e, 0x142e5affd, 0x142d927e3, 0x14124fef5, 0x142daa317, 0x142dab562, 0x142dac2f5, 0x142db1cd3, 0x142db3d49, 0x142dc0093, 0x142dd4342, 0x14270ef7b, 0x142ee0219, 0x14274697c, 0x14226db0e, 0x142807dd5, 0x142e12829, 0x1422cf1b2, 0x142e222ae, 0x1427e6eab, 0x142e304c0, 0x142e3cb07, 0x140049fe5, 0x142e44e58, 0x142e4bb8f, 0x142771477, 0x14213b582, 0x142748315, 0x142e5b5f3, 0x142e5b85a, 0x142860b0b, 0x142e66730, 0x142ebbbc4, 0x142ec1d83, 0x142ec7dc4, 0x142ec9e34, 0x142ed616c, 0x1426f18b0, 0x1408d0bd3, 0x142eea079, 0x142999086, 0x142ef6c38, 0x1425bf6df, 0x142b7370c, 0x142aed073, 0x142f5aa73, 0x142cd3e97, 0x142bf85af, 0x142f1c02b, 0x1404b16d4, 0x142f226f1, 0x142f231ee, 0x140563265, 0x142f33c26, 0x142704e0b, 0x1425f351b, 0x1426ed773, 0x142f48855, 0x142f4e184, 0x140045ce5, 0x14276aec9, 0x14226db49, 0x142da3935, 0x142f7818c, 0x1421a7176, 0x142f7b471, 0x1423107f1, 0x142f6faf9, 0x142f87498, 0x1427eb153, 0x142b3779e, 0x142f979a3, 0x142fa4dd7, 0x142bbd301, 0x1421436f9, 0x1426f7e10, 0x142fb8461, 0x142fb8d62, 0x142ce3582, 0x142b3091c, 0x142fd9384, 0x14284e9e7, 0x142ff70d0, 0x1429a3323, 0x14216e44e, 0x14213e020, 0x14300e57f, 0x143013ce6, 0x14301514a, 0x14301cb09, 0x143027fe0, 0x143028b17, 0x14304f2d5, 0x143051f33, 0x1422bbb7d, 0x143052d05, 0x142bc068f, 0x142ff7634, 0x143060e33, 0x1420324a4, 0x143074062, 0x14307dbae


$basesize = 0x0319b000
$sectsize = 0x01182000
$padsize  = 0x0001d800
	
	

#cls
if ($size -eq 0x2ff4f08) {
	"Extending EXE."
	""
	
	
	WUInt32 0x19c ($basesize + $padsize)
	WUInt32 0x1a0 ($basesize + $padsize)
	WUInt32 0x1a4 ($basesize + $padsize)
	WUInt32 0x1d0 ($basesize + $padsize)
	
	WUInt32 0x3d0 ($sectsize + $padsize)
	WUInt32 0x3d8 ($sectsize + $padsize)
	
	[System.Array]::Resize([ref]$ba, $ba.length + $padsize)
	$size = $ba.length
	
	
	#"Neutering EXE integrity checks, variety one"
	#ReplaceBytes "8b 14 8b 3b c2" "8b 14 8b 39 c0"
	
	
	#"Neutering EXE integrity checks, variety two"
	##ReplaceBytes "f7 d9 03 0c 82" "b9 00 00 00 00"
	#""
	
	
	#"Neutering runtime checks, nop variety"
	#ReplaceBytes "66 66 66 0f 1f 84 00 00 00 00 00" "90 90 90 90 90 90 90 90 90 90 90"
	#ReplaceBytes "66 66 0f 1f 84 00 00 00 00 00" "90 90 90 90 90 90 90 90 90 90"
	#ReplaceBytes "66 0f 1f 84 00 00 00 00 00" "90 90 90 90 90 90 90 90 90"
	#ReplaceBytes "0f 1f 84 00 00 00 00 00" "90 90 90 90 90 90 90 90"
	#ReplaceBytes "0f 1f 80 00 00 00 00" "90 90 90 90 90 90 90"
	#ReplaceBytes "66 0f 1f 44 00 00" "90 90 90 90 90 90"
	#ReplaceBytes "0f 1f 44 00 00" "90 90 90 90 90"
	#ReplaceBytes "0f 1f 40 00" "90 90 90 90"
	#""
	
	
	"Neutering runtime hashes (4 bytes)"
	[byte[]] $patch = 0x90, 0x90, 0x90, 0x90
	foreach ($hashloc in $hash4) {
		WBytes $hashloc  $patch
	}
	
	#currently causes eventual crashes if ER-Patcher not run to neuter NOPs
	"Neutering runtime hashes (6 bytes)"
	[byte[]] $patch = 0x90, 0x90, 0x90, 0x90, 0x90, 0x90
	foreach ($hashloc in $hash6) {
		WBytes $hashloc  $patch
	}
	
	
}


if ($size -eq (0x2ff4f08 + $padsize)) {

	#fix self-healing code
	[byte[]] $patch = 0x90, 0x90
	WBytes 0x1421a9768 $patch
	[byte[]] $patch = 0x90, 0x90, 0x90, 0x90
	WBytes 0x1421a977b $patch
	[byte[]] $patch = 0x90, 0x90
	WBytes 0x142982efc  $patch
	


	#Fix 0x1407554f0's hooked function start
	#under TitleStep_InitMenuData
	"Fixing InitMenuData"
	[byte[]] $patch = 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x05, 0x35, 0x50, 0x53, 0x01, 0x48, 0x8b, 0x48, 0x08, 0x80, 0x79, 0x10, 0x00, 0x75, 0x0c
	WBytes 0x1407554f0 $patch
	
	
	#fix dbgmenuman node lookup (Gets overwritten)
	[byte[]]$patch = 0x48, 0xB9, 0xB8, 0x8C, 0xB6, 0x41, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x01, 0x48, 0x83, 0xC0, 0x08, 0x48, 0x8B, 0x00, 0xC3
	WBytes 0x140154320 $patch
	
	#fix dbgmenuman's dbgnode init (Gets overwritten)
	[byte[]]$patch = 0xE9, 0x93, 0x95, 0x04, 0x03
	WBytes 0x140154268 $patch
	[byte[]]$patch = 0x48, 0xB9, 0xA0, 0x0D, 0x4B, 0x41, 0x01, 0x00, 0x00, 0x00, 0x48, 0xBA, 0xA0, 0x0D, 0x4B, 0x41, 0x01, 0x00, 0x00, 0x00, 0xE8, 0x67, 0x8D, 0x2D, 0xFD, 0x48, 0xB9, 0xB8, 0x8C, 0xB6, 0x41, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x09, 0x48, 0x83, 0xC1, 0x08, 0x48, 0x89, 0x01, 0x48, 0x8B, 0xC8, 0xE8, 0x6B, 0x9C, 0x2C, 0xFD, 0x48, 0x83, 0xC4, 0x28, 0xC3
	WBytes 0x14319D800 $patch
	#Ends by 14319D840
	
	##fix above getting overwritten on launch (mangled due to rdi not 
	#[byte[]]$patch = 0xe9, 0xb9, 0x44, 0x69, 0x00
	#WBytes 0x142b09382 $patch
	#[byte[]]$patch = 0x48, 0x8b, 0x45, 0x10, 0x0f, 0xb6, 0x00, 0x81, 0xff, 0x68, 0x42, 0x15, 0x40, 0x7c, 0x08, 0x81, 0xff, 0x6c, 0x42, 0x15, 0x40, 0x7f, 0x03, 0xeb, 0x05, 0xe9, 0x68, 0xf2, 0x41, 0x00, 0xe9, 0x85, 0xf2, 0x41, 0x00
	#WBytes 0x14319D840 $patch
	
	
	
	
	
	#Fix Init_FrpgSystem's return instruction
	"Fixing FrpgSystem Init"
	[byte[]]$patch = 0xc3
	WBytes 0x14015c779 $patch
	
	
	
	#(Not yet, their hook decrypts the functions)
	#"Overriding entry first call"
	#[byte[]]$patch = 0xe8, 0x23, 0x06, 0x00, 0x00
	#WBytes 0x1410e5128 $patch
	
	
	
	#CreatepStrU 0x0 ""

	""
	[System.IO.File]::WriteAllBytes($path, $ba)
	"Bytes written successfully"
	""
	pause
} else {
	"EXE wrong size, wrong EXE?"
}

















