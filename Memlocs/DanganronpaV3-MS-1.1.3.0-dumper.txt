$procname = 'Dangan3Desktop'
$bigendian = $false


#The path below is where the extracted files will be saved
$savepath = 'C:\XboxGames\Danganronpa V3- Killing Harmony Anniversary Edition\Content\data\WIN\'



[console]::CursorVisible = $false
$Host.UI.RawUI.BackgroundColor = 'Black'
$Host.UI.RawUI.ForegroundColor = 'Green'

Function RBytes
{
	Param (
		$addr,
		$sizetoread
	)
	[Byte[]] $buff = New-Object Byte[]($sizetoread)
	$read = $rpm::ReadProcessMemory($proc,$addr,$buff,$buff.length,$null);
	$buff
}

Function RAsciiStr
{   
	Param (
        $addr
    )
	([System.Text.Encoding]::ASCII.GetString($(RBytes $addr 0x50))).Split([char]0)[0]
}
Function RInt16
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 2
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToInt16($buff,0)
}
Function RInt32
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 4
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToInt32($buff,0)
}
Function RInt64
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 8
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToInt64($buff,0)
}
Function RUInt8
{   
	Param (
        $addr
    )
	RBytes $addr 1
}
Function RUInt16
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 2
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToUInt16($buff,0)
}
Function RUInt32
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 4
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToUInt32($buff,0)
}
Function RUInt64
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 8
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToUInt64($buff,0)
}
Function RSingle
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 4
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToSingle($buff,0)
}

Function WBytes
{
	Param (
		$addr,
		$wb
	)
	[System.Buffer]::BlockCopy($wb, 0, $ba, $addr, $wb.Length)
	
	$rpm::WriteProcessMemory($proc,$addr,$buff,$buff.length,$null);
}

$signature = @"
[DllImport("kernel32.dll")] public static extern IntPtr OpenProcess(
    uint h,bool b ,uint p);
[DllImport("kernel32.dll")] public static extern bool ReadProcessMemory(
    IntPtr hp,IntPtr Base,[Out]Byte[] buff,int Size,[Out]int bread);
[DllImport("kernel32.dll")] public static extern bool WriteProcessMemory(
    IntPtr hp,IntPtr Base,[In]Byte[] buff,int Size,[Out]int bwrite);
"@

$rpm = Add-Type -MemberDefinition $signature -Name rpm -PassThru
$access = 0x001F0FFF


Add-Type -AssemblyName System.Windows.Forms

#Can also bp at Dangan3Desktop.exe+886910, change loading name, then extract at bp below
#Pull RBX from a breakpoint at Dangan3Desktop.exe+886a55
Function DumpLoading
{
	Param (
		$rbx
	)

	"Monitoring..."
	
	$ba = (get-Process $procname).MainModule.BaseAddress
	$procid = (get-Process $procname).ID
	$proc = $rpm::OpenProcess($access, $false, $procid)

	$prevname = ""
	while ($true) {
		Sleep -Milliseconds 10
		$filename = RAsciiStr (RInt64 ($rbx + 0x10))
		if ($filename.Contains('/')) {
			if ($filename -ne $prevname) {
				$prevname = $filename
				$size = RInt32 ($rbx + 0x58)
				$loc = RInt64 ($rbx + 0x38)
				if ($loc -gt 0) {
					$loc = $loc + (RInt64 ($rbx + 0x40))

					$ba = RBytes $loc $size
					$filename = $filename.Replace('/', '\')

					if (Test-Path -Path ($savepath + $filename) -PathType Leaf) {
						Sleep -milliseconds 10
					} else {
						[System.IO.Directory]::CreateDirectory([System.IO.Path]::GetDirectoryName($savepath + $filename)) | Out-Null
						[io.file]::WriteAllBytes($savepath + $filename, $ba)
						$rbx.ToString("X") + " : Dumped $filename"
						Sleep -milliseconds 10
					}
				}
			}
			#[System.Windows.Forms.SendKeys]::SendWait("{F9}")
		}
	}
}


#############
cls
"Usage:  DumpLoading 0x12345678 (exact number pulled from game's RBX at breakpoint)"
