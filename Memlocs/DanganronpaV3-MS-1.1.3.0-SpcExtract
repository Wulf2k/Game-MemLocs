$filePath = 'C:\XboxGames\Danganronpa V3- Killing Harmony Anniversary Edition\Content\data\WIN\flash\title\dbg_title.spc'


Add-Type -TypeDefinition @"
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;


namespace DRV3_Sharp
{
    public class SpcData
    {
        public string Signature { get; set; }
        public uint EntryCount { get; set; }
        public List<SpcEntry> Entries { get; set; }

        public SpcData()
        {
            this.Entries = new List<SpcEntry>();
        }
    }

    public class SpcEntry
    {
        public uint CompressedSize { get; set; }
        public uint DecompressedSize { get; set; }
        public byte[] Data { get; set; }
    }

    public class SpcSerializer
    {
        public static SpcData Deserialize(byte[] data)
        {
            using (MemoryStream ms = new MemoryStream(data))
            using (BinaryReader reader = new BinaryReader(ms))
            {
                SpcData spcData = new SpcData();
                spcData.Signature = Encoding.ASCII.GetString(reader.ReadBytes(4));
                if (spcData.Signature != "CPS.")
                {
                    throw new Exception("Invalid SPC signature!");
                }

                spcData.EntryCount = reader.ReadUInt32();
                for (int i = 0; i < spcData.EntryCount; i++)
                {
                    SpcEntry entry = new SpcEntry();
                    entry.CompressedSize = reader.ReadUInt32();
                    entry.DecompressedSize = reader.ReadUInt32();
                    entry.Data = reader.ReadBytes((int)entry.CompressedSize);
                    spcData.Entries.Add(entry);
                }
                return spcData;
            }
        }
    }

    public class SpcCompressor
    {
        private const int SPC_BLOCK_SIZE = 16;
        private const int SPC_WINDOW_MAX_SIZE = 1024;
        private const int SPC_SEQUENCE_MAX_SIZE = 65;

		private static byte ReverseBits(byte b)
		{
			return (byte)((((b * (ulong)0x80200802) & (ulong)0x0884422110) * (ulong)0x0101010101) >> 32);
		}
        public static byte[] Decompress(byte[] compressedData)
        {
            List<byte> decompressedData = new List<byte>();
            int compressedSize = compressedData.Length;
            int flag = 1;
            int pos = 0;

            while (pos < compressedSize)
            {
                if (flag == 1)
                {
                    flag = 0x100 | ReverseBits(compressedData[pos++]);
                }

                if (pos >= compressedSize)
                {
                    break;
                }

                if ((flag & 1) == 1)
                {
                    decompressedData.Add(compressedData[pos++]);
                }
                else
                {
                    byte byte1 = compressedData[pos++];
					byte byte2 = compressedData[pos++];
					ushort b = BitConverter.ToUInt16(new byte[] { byte1, byte2 }, 0);
                    byte count = (byte)((b >> 10) + 2);
                    short offset = (short)(b & (SPC_WINDOW_MAX_SIZE - 1));

                    for (int i = 0; i < count; ++i)
                    {
                        int reverseIndex = decompressedData.Count - SPC_WINDOW_MAX_SIZE + offset;
                        decompressedData.Add(decompressedData[reverseIndex]);
                    }
                }

                flag >>= 1;
            }

            return decompressedData.ToArray();
		}
    }
}
"@ -Language CSharp

$fileContent = [System.IO.File]::ReadAllBytes($filePath)
class SPCHeader {
    [string]$Signature
    [uint32]$NumFiles
    [void] Read($reader) {
        $this.Signature = [System.Text.Encoding]::ASCII.GetString($reader.ReadBytes(4))
        $reader.BaseStream.Position += 0x24
        $this.NumFiles = $reader.ReadUInt32()
        $reader.BaseStream.Position += 0x14
    }
}

class SPCEntry {
    [int16]$CompFlag
    [int16]$UnkFlag
    [uint32]$CompSize
    [uint32]$DecompSize
    [uint32]$NameLen
    [string]$Name
    [byte[]]$CompBytes
    [void] Read($reader) {
		Write-Host "CompFlag pos: " $reader.BaseStream.Position.ToString("X")
        $this.CompFlag = $reader.ReadInt16()
        $this.UnkFlag = $reader.ReadInt16()
        $this.CompSize = $reader.ReadUInt32()
        $this.DecompSize = $reader.ReadUInt32()
		
		Write-Host "Name Length pos: " $reader.BaseStream.Position.ToString("X")
        $this.NameLen = $reader.ReadUInt32()
		
		Write-Host "Name Length: " $this.NameLen
        $reader.BaseStream.Position += 0x10
        $this.Name = [System.Text.Encoding]::ASCII.GetString($reader.ReadBytes($this.NameLen))
		
		Write-Host "Name: " $this.Name
        $reader.BaseStream.Position += (0x10 - ($reader.BaseStream.Position % 0x10))
        
		Write-Host "CompBytes pos: " $reader.BaseStream.Position.ToString("X")
		$this.CompBytes = $reader.ReadBytes($this.CompSize)
		$pad = (0x10 - ($reader.BaseStream.Position % 0x10))
		if ($pad -eq 0x10) { $pad = 0 }
        $reader.BaseStream.Position += $pad
    }
}

$reader = New-Object System.IO.BinaryReader([System.IO.MemoryStream]::new($fileContent))

$header = New-Object SPCHeader
$header.Read($reader)

$reader.BaseStream.Position += 0x10
$entries = @()
for ($i = 0; $i -lt $header.NumFiles; $i++) {
    $entry = New-Object SPCEntry
    $entry.Read($reader)
    $entries += $entry
}

$reader.Close()

Function Decompress {
    param ([byte[]]$Data)
    return [DRV3_Sharp.SpcCompressor]::Decompress($Data)
}

foreach ($entry in $entries) {
    $decompressedData = Decompress $entry.CompBytes
    $outfilePath = "$filePath-" + $entry.name
    [System.IO.File]::WriteAllBytes($outfilePath, $decompressedData)
}