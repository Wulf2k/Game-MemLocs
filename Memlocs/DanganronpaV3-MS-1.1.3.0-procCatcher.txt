$procname = 'Dangan3Desktop'
$bigendian = $false

#PsSuspend available from SysInternals - https://learn.microsoft.com/en-us/sysinternals/downloads/pssuspend
#Save it somewhere, and update the path below
$pssuspend = 'C:\utils\pssuspend.exe'

[console]::CursorVisible = $false
$Host.UI.RawUI.BackgroundColor = 'Black'
$Host.UI.RawUI.ForegroundColor = 'Green'

Function RBytes
{
	Param (
		$addr,
		$sizetoread
	)
	[Byte[]] $buff = New-Object Byte[]($sizetoread)
	$read = $rpm::ReadProcessMemory($proc,$addr,$buff,$buff.length,$null);
	$buff
}

Function RAsciiStr
{   
	Param (
        $addr
    )
	([System.Text.Encoding]::ASCII.GetString($(RBytes $addr 0x50))).Split([char]0)[0]
}
Function RInt16
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 2
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToInt16($buff,0)
}
Function RInt32
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 4
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToInt32($buff,0)
}
Function RInt64
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 8
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToInt64($buff,0)
}
Function RUInt8
{   
	Param (
        $addr
    )
	RBytes $addr 1
}
Function RUInt16
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 2
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToUInt16($buff,0)
}
Function RUInt32
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 4
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToUInt32($buff,0)
}
Function RUInt64
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 8
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToUInt64($buff,0)
}
Function RSingle
{   
	Param (
        $addr
    )
	$buff = RBytes $addr 4
	if ($bigendian -eq $true) {
		[Array]::Reverse($buff)
	}
	[bitconverter]::ToSingle($buff,0)
}

Function WBytes
{
	Param (
		$addr,
		$wb
	)
	[System.Buffer]::BlockCopy($wb, 0, $ba, $addr, $wb.Length)
	
	$rpm::WriteProcessMemory($proc,$addr,$buff,$buff.length,$null);
}

$signature = @"
[DllImport("kernel32.dll")] public static extern IntPtr OpenProcess(
    uint h,bool b ,uint p);
[DllImport("kernel32.dll")] public static extern bool ReadProcessMemory(
    IntPtr hp,IntPtr Base,[Out]Byte[] buff,int Size,[Out]int bread);
[DllImport("kernel32.dll")] public static extern bool WriteProcessMemory(
    IntPtr hp,IntPtr Base,[In]Byte[] buff,int Size,[Out]int bwrite);
"@

$rpm = Add-Type -MemberDefinition $signature -Name rpm -PassThru
$access = 0x001F0FFF



#Pull RBX from a breakpoint at Dangan3Desktop.exe+886a55
############################################################################
$processNameToSuspend = "Dangan3Desktop"

cls
Write-Host "Waiting for process '$processNameToSuspend'."
$cont = $true
while ($cont) {
	$process = Get-Process -Name $processNameToSuspend -ErrorAction SilentlyContinue
	if ($process -ne $null) {
		Start-Process -FilePath "$pssuspend" -ArgumentList "-nobanner $($process.ID)"
		$cont = $false
		Write-Host "Process '$processNameToSuspend' (PID: $($process.Id)) has been suspended."
		""
	} else {

	}
}

$ba = (get-Process $procname).MainModule.BaseAddress
$procid = (get-Process $procname).ID
$proc = $rpm::OpenProcess($access, $false, $procid)

$cmp = RUInt32 ([Int64]$ba + [Int64]0x889c48)
if ($cmp -eq 0x7d801050)
{
	"Version check successful."
	"Press Enter after setting a breakpoint at Dangan3Desktop.exe+886a55"
	pause
	Start-Process -FilePath "$pssuspend" -ArgumentList "-r -nobanner $($process.ID)"
	""
	"Process resumed."
	"Run DumpLoading script from other file."
	"When the breakpoint is hit, copy the value of RBX from CE and enter the following command with it included at the end:"
	"DumpLoading 0x"
	"(eg, DumpLoading 0x12345678)"
	""
	"If RBX changes, run DumpLoading in a new powershell window against that new RBX as well."

} else {
	"Bytes don't match, wrong version?"
	"Aborting"
}


############################################################################