$procname = "StateOfDecay2-Win64-Shipping"
$bigendian = $false

[console]::CursorVisible = $false
$Host.UI.RawUI.BackgroundColor = 'Black'
$Host.UI.RawUI.ForegroundColor = 'Green'

Function RBytes
{
	Param (
		$addr,
		$sizetoread
	)
	$pos = $addr
	[Byte[]] $buff = New-Object Byte[]($sizetoread)
	$read = $rpm::ReadProcessMemory($proc,$pos,$buff,$buff.length,$null);
	$buff
}
Function RAsciiStr
{   
	Param (
        $addr
    )
	([System.Text.Encoding]::ASCII.GetString($(RBytes $addr 0x200))).Split([char]0)[0]
}
Function RUnicodeStr {
    Param (
        $addr
    )
    ([System.Text.Encoding]::Unicode.GetString($(RBytes $addr 0x200))).Split([char]0)[0]
}
Function ReadAndConvert {
    Param (
        [IntPtr]$addr,
        [int]$byteCount,
        [string]$convertType
    )
    $buff = RBytes $addr $byteCount
    if ($bigendian -eq $true) {
        [Array]::Reverse($buff)
    }

    switch ($convertType) {
        "Int16"   { return [BitConverter]::ToInt16($buff, 0) }
        "Int32"   { return [BitConverter]::ToInt32($buff, 0) }
        "Int64"   { return [BitConverter]::ToInt64($buff, 0) }
        "UInt8"   { return $buff[0] }
        "UInt16"  { return [BitConverter]::ToUInt16($buff, 0) }
        "UInt32"  { return [BitConverter]::ToUInt32($buff, 0) }
        "UInt64"  { return [BitConverter]::ToUInt64($buff, 0) }
        "Single"  { return [BitConverter]::ToSingle($buff, 0) }
        default   { throw "Unknown conversion type $convertType" }
    }
}
Function RInt16   { Param ([IntPtr]$addr) ReadAndConvert $addr 2 "Int16" }
Function RInt32   { Param ([IntPtr]$addr) ReadAndConvert $addr 4 "Int32" }
Function RInt64   { Param ([IntPtr]$addr) ReadAndConvert $addr 8 "Int64" }
Function RUInt8   { Param ([IntPtr]$addr) ReadAndConvert $addr 1 "UInt8" }
Function RUInt16  { Param ([IntPtr]$addr) ReadAndConvert $addr 2 "UInt16" }
Function RUInt32  { Param ([IntPtr]$addr) ReadAndConvert $addr 4 "UInt32" }
Function RUInt64  { Param ([IntPtr]$addr) ReadAndConvert $addr 8 "UInt64" }
Function RSingle  { Param ([IntPtr]$addr) ReadAndConvert $addr 4 "Single" }

Function WBytes {
    Param (
        [IntPtr]$addr,
        [Byte[]]$data
    )
    $size = $data.Length
    $written = 0
    $success = $rpm::WriteProcessMemory($proc, $addr, $data, $size, [ref]$written)
    if (-not $success -or $written -ne $size) {
        throw "Failed to write memory at $addr"
    }
}
Function WInt16   { Param ([IntPtr]$addr, [Int16]$val)   WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WInt32   { Param ([IntPtr]$addr, [Int32]$val)   WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WInt64   { Param ([IntPtr]$addr, [Int64]$val)   WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WUInt8   { Param ([IntPtr]$addr, [Byte]$val)    WBytes $addr @($val) }
Function WUInt16  { Param ([IntPtr]$addr, [UInt16]$val)  WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WUInt32  { Param ([IntPtr]$addr, [UInt32]$val)  WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WUInt64  { Param ([IntPtr]$addr, [UInt64]$val)  WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WSingle  { Param ([IntPtr]$addr, [Single]$val)  WBytes $addr ([BitConverter]::GetBytes($val)) }
Function WAsciiStr {
    Param (
        [IntPtr]$addr,
        [string]$str,
        [int]$maxLen = 0x50
    )
    $bytes = [System.Text.Encoding]::ASCII.GetBytes($str)
    if ($bytes.Length -ge $maxLen) {
        $bytes = $bytes[0..($maxLen-2)]
    }
    $padded = New-Object Byte[]($maxLen)
    [Array]::Copy($bytes, $padded, $bytes.Length)
    WBytes $addr $padded
}

Function WUnicodeStr {
    Param (
        [IntPtr]$addr,
        [string]$str,
        [int]$maxLen = 0x50
    )
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($str)
    if ($bytes.Length -ge $maxLen) {
        $bytes = $bytes[0..($maxLen-2)]
    }
    $padded = New-Object Byte[]($maxLen)
    [Array]::Copy($bytes, $padded, $bytes.Length)
    WBytes $addr $padded
}

$signature = @"
[DllImport("kernel32.dll")] public static extern IntPtr OpenProcess(
    uint h,bool b ,uint p);
[DllImport("kernel32.dll")] public static extern bool ReadProcessMemory(
    IntPtr hp,IntPtr Base,[Out]Byte[] buff,int Size,[Out]int bread);
[DllImport("kernel32.dll")] public static extern bool WriteProcessMemory(
    IntPtr hp,IntPtr Base,[In]Byte[] buff,int Size,out int bwrite);
[DllImport("kernel32.dll")] public static extern bool VirtualProtectEx(
	IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);
"@
$PAGE_EXECUTE_READWRITE = 0x40
$oldProtection = 0

$rpm = Add-Type -MemberDefinition $signature -Name rpm -PassThru
$access = 0x001F0FFF

$ba = (get-Process $procname).MainModule.BaseAddress
$procid = (get-Process $procname).ID
$proc = $rpm::OpenProcess($access, $false, $procid)



Function GetNameFromNameOffset {
	Param (
		[Int32]$offset
	)
	
	[IntPtr]$table = RInt64 ($namesTablePtr)		
	if ($offset -lt 0x1000) {
		$offset = RInt32 ($ba + [Int64]0x44da8e0 + ($offset * 4))
		#FIX FOR STEAM
	}
	$name = RAsciiStr ($table + [Int64]$offset + 8)

	$name
}
Function GetObjFromObjId {
	Param (
		[Int32]$id
	)
	[IntPtr]$table = RInt64 ($objTablePtr)		
	$obj = RInt64  ($table + [Int64](0x18 * $id))
	$obj
}





class UObject {
	[IntPtr]$BaseAddress
	UObject([IntPtr]$addr) {
		$this.BaseAddress = $addr
	}
	[int] ObjNum() {
		return RInt32 ($this.BaseAddress.ToInt64() + 0xc)
	}
	[string] ObjName() {
		$ptr = RInt64 ([IntPtr]($this.BaseAddress.ToInt64() + 0x10))
		$nameId = RInt32($ptr + 0x18)
		return GetNameFromNameOffset $nameId
	}
	[string] Name() {
		$nameId = RInt32([IntPtr]($this.BaseAddress.ToInt64() + 0x18))
		return GetNameFromNameOffset $nameId
	}	
}










$verIdent = RInt32 ($ba + [Int64]0xe8)
$ver = "Dunno"
if ($verIdent -eq 0x49274e48) {
	$ver = "MS"
	$daytonVehicleVtPtr = $ba + [Int64]0x03418E40
	$namesTablePtr 		= $ba + [Int64]0x044DB248
	$objTablePtr 		= $ba + [Int64]0x044E3B30
	$worldPtr 			= $ba + [Int64]0x045D7C88
}
if ($verIdent -eq 0xd54624b7) {
	$ver = "Steam"
	$daytonVehicleVtPtr = $ba + [Int64]0x034E8930
	$namesTablePtr 		= $ba + [Int64]0x04629DC8
	$objTablePtr		= $ba + [Int64]0x046326b0
	$worldPtr 			= $ba + [Int64]0x04726808
}




















##############################	DUMP OBJECT LIST

function DumpObjs {
	$numobj = RInt32 ($objTablePtr - 0x8)
	$ptr    = RInt64 $objTablePtr

	for ($i = 1; $i -le $numobj; $i++) {
		$ptr = (RInt64 $objTablePtr) + ($i * 0x18)
		$obj = [UObject]::New((RInt64($ptr)))

		"{0,6}  {1,-18}  {2,-18}  {3,-20}  {4}" -f `
			$i, ("0x{0:X}" -f $ptr), ("0x{0:X}" -f $obj.BaseAddress), $obj.ObjName(), $obj.Name()
	}
}











########################## INDIVIDUAL OBJECT PROPERTY DUMPER - INTEGRATE SOMEHOW






function GetProps {
    param(
        [Parameter(Mandatory = $true)]
        [Int64] $MainPtr
    )

    $results = @()

    $ptr  = RInt64 ($MainPtr + 0x10L)
    $size = RInt32 ($ptr + 0x40L)

    $results += ("Size: {0:X}" -f $size)

    while ($ptr -ne 0) {
        $nameId = RInt32 ($ptr + 0x18L)
        $name   = GetNameFromNameOffset $nameId
        $bits   = RUInt64 ($ptr + 0x30L)
        
        $classptr    = RInt64 ($ptr + 0x10L)
        $classnameId = RInt32 ($classptr + 0x18L)
        $classname   = GetNameFromNameOffset $classnameId
        $offset      = RUInt32 ($ptr + 0x50L)
        
        $line = switch ($classname) {
            "ArrayProperty" {
                $val = RUInt64 ($MainPtr + $offset)
                "{0,8:X}  {1,-30}  {2,30}  {3}" -f $offset, $classname, ("0x{0:X16}" -f $val), $name
            }
            "BoolProperty" {
                $val = RUInt8 ($MainPtr + $offset)
                "{0,8:X}  {1,-30}  {2,30:X}  {3}" -f $offset, $classname, $val, $name
            }
            "ByteProperty" {
                $val = RUInt8 ($MainPtr + $offset)
                "{0,8:X}  {1,-30}  {2,30:X}  {3}" -f $offset, $classname, $val, $name
            }
            "IntProperty" {
                $val = RInt32 ($MainPtr + $offset)
                "{0,8:X}  {1,-30}  {2,30}  {3}" -f $offset, $classname, $val, $name
            }
            "FloatProperty" {
                $val = RSingle ($MainPtr + $offset)
                "{0,8:X}  {1,-30}  {2,30:F4}  {3}" -f $offset, $classname, $val, $name
            }
            "NameProperty" {
                $val = RUInt64 ($MainPtr + $offset)
                $val = GetNameFromNameOffset $val
                "{0,8:X}  {1,-30}  {2,30}  {3}" -f $offset, $classname, $val, $name
            }
            "ObjectProperty" {
                $val = RUInt64 ($MainPtr + $offset)
                "{0,8:X}  {1,-30}  {2,30}  {3}" -f $offset, $classname, ("0x{0:X16}" -f $val), $name
            }
            default {
                "{0,8:X}  {1,-30}  {2,30}  {3}" -f $offset, $classname, "", $name
            }
        }

        $results += $line
		$ptr = RInt64 ($ptr + 0x58L)
    }

    return $results
}

$mainptr = 0x0002D3817C0L

GetProps $mainptr
















